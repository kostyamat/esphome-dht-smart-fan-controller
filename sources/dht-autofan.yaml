esphome:
  name: dht
  friendly_name: DHT_Auto_Fan_controller

esp8266:
  board: d1_mini

# --- Temperature and Humidity Sensor ---
sensor:
  - platform: dht
    pin: D5
    temperature:
      name: "Temperature"
      id: temperature
      unit_of_measurement: "°C"
      accuracy_decimals: 1
      # entity_category: diagnostic
      web_server:
        sorting_group_id: climate_sensors
        sorting_weight: 1
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 1
    humidity:
      name: "Humidity"
      id: humidity
      unit_of_measurement: "%"
      accuracy_decimals: 1
      # entity_category: sensor
      web_server:
        sorting_group_id: climate_sensors
        sorting_weight: 2
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 1
    update_interval: 10s

# --- General Settings ---
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Fan Controller AP"
    password: "12345678"
    ap_timeout: 1min

web_server:
  port: 80
  auth:
    username: "admin"
    password: "12345678"
  include_internal: true
  local: true
  version: 3


  sorting_groups:
    - id: climate_sensors
      name: "Climate"
      sorting_weight: 5
    - id: fan_control
      name: "Fan Control"
      sorting_weight: 10
    - id: settings
      name: "Settings Auto Mode"
      sorting_weight: 20


api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome


logger:

captive_portal:

# --- Global Variables ---
globals:
  - id: auto_mode
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: stored_min_temp
    type: float
    restore_value: true
    initial_value: '24.0'
  - id: stored_max_temp
    type: float
    restore_value: true
    initial_value: '30.0'
  - id: stored_min_speed
    type: float
    restore_value: true
    initial_value: '30.0'
  - id: stored_max_speed
    type: float
    restore_value: true
    initial_value: '80.0'
  - id: stored_manual_speed
    type: float
    restore_value: true
    initial_value: '50.0'


# --- Output Pin for Fan Control ---
output:
  - platform: slow_pwm
    id: fan_pwm_output
    pin: D7
    period: 2500ms
    inverted: true

# --- Fan Configuration ---
fan:
  - platform: speed
    id: my_fan
    output: fan_pwm_output
    name: "Fan"
    speed_count: 100
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_group_id: fan_control
      sorting_weight: 1
    on_speed_set:
      - lambda: |-
          if (!id(auto_mode)) {
            id(stored_manual_speed) = x;
          }

# --- Mode Switch ---
switch:
  - platform: template
    name: "Auto Mode"
    id: auto_mode_switch
    icon: "mdi:fan-auto"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: "return id(auto_mode);"
    turn_on_action:
      - lambda: "id(auto_mode) = true;"
    turn_off_action:
      - lambda: |-
          id(auto_mode) = false;
          if (id(my_fan).state) {
            auto call = id(my_fan).make_call();
            call.set_speed(id(stored_manual_speed));
            call.perform();
          }
    web_server:
      sorting_group_id: fan_control
      sorting_weight: 2

# --- Temperature and Speed Settings with Validation ---
number:
  - platform: template
    name: "Min Temperature"
    id: min_temp
    unit_of_measurement: "°C"
    min_value: 15
    max_value: 35
    step: 0.5
    icon: "mdi:thermometer-minus"
    web_server:
      sorting_group_id: settings
      sorting_weight: 1
    lambda: |-
      return id(stored_min_temp);
    set_action:
      - lambda: |-
          id(stored_min_temp) = x;
          if (x > id(stored_max_temp)) {
            id(stored_min_temp) = id(stored_max_temp);
            id(min_temp).publish_state(id(stored_max_temp));
            ESP_LOGW("validation", "Min temp cannot be higher than max temp! Setting to %.1f", id(stored_max_temp));
          }
      
  - platform: template
    name: "Max Temperature"
    id: max_temp
    unit_of_measurement: "°C"
    min_value: 20
    max_value: 40
    step: 0.5
    icon: "mdi:thermometer-plus"
    web_server:
      sorting_group_id: settings
      sorting_weight: 2
    lambda: |-
      return id(stored_max_temp);
    set_action:
      - lambda: |-
          id(stored_max_temp) = x;
          if (x < id(stored_min_temp)) {
            id(stored_max_temp) = id(stored_min_temp);
            id(max_temp).publish_state(id(stored_min_temp));
            ESP_LOGW("validation", "Max temp cannot be lower than min temp! Setting to %.1f", id(stored_min_temp));
          }

  - platform: template
    name: "Min Fan Speed"
    id: min_fan_speed_limit
    unit_of_measurement: "%"
    min_value: 10
    max_value: 90
    step: 5
    icon: "mdi:fan-minus"
    web_server:
      sorting_group_id: settings
      sorting_weight: 3
    lambda: |-
      return id(stored_min_speed);
    set_action:
      - lambda: |-
          id(stored_min_speed) = x;
          if (x > id(stored_max_speed)) {
            id(stored_min_speed) = id(stored_max_speed);
            id(min_fan_speed_limit).publish_state(id(stored_max_speed));
            ESP_LOGW("validation", "Min speed cannot be higher than max speed! Setting to %.0f%%", id(stored_max_speed));
          }

  - platform: template
    name: "Max Fan Speed"
    id: max_fan_speed_limit
    unit_of_measurement: "%"
    min_value: 20
    max_value: 100
    step: 5
    icon: "mdi:fan-plus"
    web_server:
      sorting_group_id: settings
      sorting_weight: 4
    lambda: |-
      return id(stored_max_speed);
    set_action:
      - lambda: |-
          id(stored_max_speed) = x;
          if (x < id(stored_min_speed)) {
            id(stored_max_speed) = id(stored_min_speed);
            id(max_fan_speed_limit).publish_state(id(stored_min_speed));
            ESP_LOGW("validation", "Max speed cannot be lower than min speed! Setting to %.0f%%", id(stored_min_speed));
          }

# --- Status Display ---
text_sensor:
  - platform: template
    name: "Mode Status"
    id: mode_status
    icon: "mdi:information-outline"
    lambda: |-
      if (id(auto_mode)) {
        if (id(my_fan).state) {
          int speed = id(my_fan).speed;
          return {"AUTO: ON, Motor: " + (speed > 1 ? to_string(speed).substr(0, 4) : "Stop")};
        } else {
          return {"AUTO: OFF"};
        }
      } else {
        if (id(my_fan).state) {
          int speed = id(my_fan).speed;
          return {"MANUAL: ON, Motor: " + (speed > 1 ? to_string(speed).substr(0, 4) : "Stop")};
        } else {
          return {"MANUAL: OFF"};
        }
      }
    update_interval: 2s
    web_server:
      sorting_group_id: fan_control
      sorting_weight: 3
      
  - platform: template
    name: "Temperature Range"
    id: temp_range_status
    icon: "mdi:thermometer-lines"
    lambda: |-
      float min_t = id(stored_min_temp);
      float max_t = id(stored_max_temp);
      return {to_string(min_t).substr(0, 4) + "°C - " + to_string(max_t).substr(0, 4) + "°C"};
    update_interval: 5s
    web_server:
      sorting_group_id: settings
      sorting_weight: 5

  - platform: template
    name: "Speed Range"
    id: speed_range_status
    icon: "mdi:fan"
    lambda: |-
      float min_s = id(stored_min_speed);
      float max_s = id(stored_max_speed);
      return {to_string((int)min_s) + "% - " + to_string((int)max_s) + "%"};
    update_interval: 5s
    web_server:
      sorting_group_id: settings
      sorting_weight: 6

# --- Simple Automation ---
interval:
  - interval: 5s
    then:
      - lambda: |-
          // AUTO режим працює ТІЛЬКИ якщо Fan увімкнений користувачем
          if (!id(auto_mode) || !id(my_fan).state) return;
          
          float temp = id(temperature).state;
          if (isnan(temp)) return;
          
          float min_t = id(stored_min_temp);
          float max_t = id(stored_max_temp);
          
          // Використовуємо значення з повзунків
          float min_speed = id(stored_min_speed) / 100.0;
          float max_speed = id(stored_max_speed) / 100.0;
          
          ESP_LOGI("main", "AUTO: temp=%.1f, range=%.1f-%.1f, speed_range=%.0f%%-%.0f%%", 
                   temp, min_t, max_t, min_speed * 100, max_speed * 100);
          
          if (temp < min_t) {
            // Too cold - turn off fan
            auto call = id(my_fan).make_call();
            call.set_speed(0);
            call.perform();
            ESP_LOGI("main", "AUTO: Fan OFF - too cold");
          } else if (temp > max_t) {
            // Too hot - max speed
            auto call = id(my_fan).make_call();
            call.set_speed(max_speed * 100);
            call.perform();
            ESP_LOGI("main", "AUTO: Fan %.0f%% - too hot", max_speed * 100);
          } else {
            // In range - calculate speed (but fan already ON)
            float temp_ratio = (temp - min_t) / (max_t - min_t);
            float target_speed = min_speed + temp_ratio * (max_speed - min_speed);
            int fan_speed = round(target_speed * 100.0);
            
            ESP_LOGI("main", "AUTO: temp_ratio=%.3f, target=%.3f, fan_speed=%d", temp_ratio, target_speed, fan_speed);
            
            auto call = id(my_fan).make_call();
            call.set_speed(fan_speed);
            call.perform();
          }